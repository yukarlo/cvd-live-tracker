# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

type Continent {
    "Total Number of active cases in that continent"
    active: Int
    "Total Number of cases"
    cases: Int
    "Name of the Continent"
    continent: String
    "List of the countries in that Continent"
    countries: [Country]
    "Total Number of critical cases in that continent"
    critical: Int
    "Total Number of deaths"
    deaths: Int
    "Total Number of recovered cases in that continent"
    recovered: Int
    "Total Number of cases for today"
    todayCases: Int
    "Total Number of deaths for today"
    todayDeaths: Int
    "Timestamp of the last data updated time"
    updated: Float
}

type Country {
    "Total Number of active cases in that country"
    active: Int
    "Total Number of cases"
    cases: Int
    "Number of cases taken per million population"
    casesPerOneMillion: Float
    "Name of the Continent"
    continent: String
    "Name of the Country"
    country: String
    "Meta Data oF the Country like Latitude, Longitude, Flag, Country Code"
    countryInfo: CountryMeta
    "Total Number of critical cases in that country"
    critical: Int
    "Total Number of deaths"
    deaths: Int
    "Number of dealths taken per million population"
    deathsPerOneMillion: Float
    "Get historic cases for the country"
    historical(count: Int, reverse: Boolean, skip: Int): [Historic]
    "Total Number of recovered cases in that country"
    recovered: Int
    "List of the states in that Country"
    states: [State]
    "Total Number of tests taken in that country"
    tests: Int
    "Number of tests taken per million population"
    testsPerOneMillion: Float
    "Total Number of cases for today"
    todayCases: Int
    "Total Number of deaths for today"
    todayDeaths: Int
    "Timestamp of the last data updated time"
    updated: Float
}

type CountryMeta {
    _id: Int
    "Image URl of the country's flag"
    flag: String
    "Two Alphabet representation of the country name"
    iso2: String
    "Three Alphabet representation of the country name"
    iso3: String
    "Latitude location of the country"
    lat: Float
    "Longtitude location of the country"
    long: Float
}

"District information for India"
type District {
    "Total active cases"
    active: Int
    "Total number of cases"
    cases: Int
    "Total number of deaths"
    deaths: Int
    "District Name"
    district: String
    "Get historic cases for the District. This data is available only for India"
    historical(count: Int, reverse: Boolean, skip: Int): [Historic]
    "Total number of recovered"
    recovered: Int
    "Today cases"
    todayCases: Int
    "Today deaths"
    todayDeaths: Int
    "Today recovered"
    todayRecovered: Int
}

type Historic {
    "Number of cases on the day"
    cases: Int
    "Date"
    date: String
    "Number of deaths on the day"
    deaths: Int
    "Number of recovered on the day"
    recovered: Int
    "Today cases. This data is available only for India"
    todayCases: Int
    "Today deaths. This data is available only for India"
    todayDeaths: Int
    "Today recovered. This data is available only for India"
    todayRecovered: Int
}

type Query {
    "To get details of the world"
    all: Country
    "To get all details of cases of a particular continent"
    continent(name: ID!): Continent
    "To get all details of cases in all continents"
    continents: [Continent]
    "To get all details of cases in all countries"
    countries: [Country]
    "To get all details of cases of a particular Country"
    country(name: ID!): Country
    "To get all details of of a particular state. Currently only USA and India are supported"
    state(countryName: ID!, stateName: ID!): State
    "To get all details of cases in all States. Currently only USA and India are supported"
    states(countryName: ID!): [State]
}

type State {
    "Total Number of active cases in this state"
    active: Int
    "Total Number of cases"
    cases: Int
    "Total Number of deaths"
    deaths: Int
    "All districts in the state. This data is available only for India"
    districts: [District]
    "Get historic cases for the State. This data is available only for India"
    historical(count: Int, reverse: Boolean, skip: Int): [Historic]
    "Total number of recovered. This data is available only for India"
    recovered: Int
    "Name of the State"
    state: String
    "Total Number of tests taken in that state"
    tests: Int
    "Number of tests taken per million population. This data is only available for USA"
    testsPerOneMillion: Float
    "Total Number of cases for today"
    todayCases: Int
    "Total Number of deaths for today"
    todayDeaths: Int
    "Today recovered. This data is available only for India"
    todayRecovered: Int
    "Updated time stamp. This data is available only for India"
    updated: Float
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}


"The `Upload` scalar type represents a file upload."
scalar Upload